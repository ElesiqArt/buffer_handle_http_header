#include <cstring> // memcpy() memset()
#include <cstddef> // nullptr_t

#include <buffer_handle/date.hpp> // rfc1123::date()
#include <buffer_handle/helper.hpp> // must_write()
#include <buffer_handle/number.hpp> // integral_number()
#include <buffer_handle/string.hpp> // string()
#include <buffer_handle/timezone.hpp> // universal_timezone_t
#include <buffer_handle/token.hpp> // equal() semicolon() space()

#include <buffer_handle_http_header/common.hpp> // field_()

namespace buffer_handle_http_header
{
  namespace cookie
  {
    namespace details
    {
      // For 'Secure' and 'HttpOnly'
      // rfc 6265 §5.2.5 and §5.2.6
      // If unset, write spaces, if set write value
      template<config Config, action Action> inline
      char * handle_bool(char * buffer, const char * attribute, std::size_t attribute_length, bool value)
      {
	if(Config == config::static_)
	  {
	    if(value)
	      {
		buffer = buffer_handle::semicolon<Config, Action>(buffer);
		buffer = buffer_handle::space<Config, Action>(buffer);

		if(Action == action::prepare)
		  {
		    buffer_handle::string<Config, Action>(buffer, attribute, attribute_length);
		  }

		buffer += attribute_length;
	      }
	  }
	else if(Config == config::dynamic)
	  {
	    buffer = buffer_handle::semicolon<Config, Action>(buffer);
	    buffer = buffer_handle::space<Config, Action>(buffer);

	    switch(Action)
	      {
	      case action::prepare:
	      case action::reset:
		{
		  std::memset(buffer, ' ', attribute_length);

		  break;
		}
	      case action::write:
		{
		  if(value)
		    {
		      std::memcpy(buffer, attribute, attribute_length);
		    }
		}
	      }

	    buffer += attribute_length;
	  }

	return buffer;
      }

      template<config Config, action Action> inline
      char * handle_bool(char * buffer, const char * attribute, bool value)
      {
	return handle_bool<Config, Action>(buffer, attribute, std::strlen(attribute), value);
      }

      // For 'Domain' and 'Path'
      // rfc 6265 §5.2.3 and §5.2.4
      // Write a ';' delimiter at the end of the content
      template<config Config, action Action, typename T> inline
      char * handle_string_(char * buffer, const char * attribute, std::size_t attribute_length, T value, std::size_t length, std::size_t max_length)
      {
	buffer = buffer_handle::semicolon<Config, Action>(buffer);
	buffer = buffer_handle::space<Config, Action>(buffer);
	buffer = buffer_handle::string<Config, Action>(buffer, attribute, attribute_length);
	buffer = buffer_handle::equal<Config, Action>(buffer);

	buffer = buffer_handle::string<Config, align::left, ' ', Action>(buffer, value, length, max_length);

	if(length < max_length)
	  {
	    buffer_handle::semicolon<Config, Action>(buffer - (max_length - length));
	  }

	return buffer;
      }

      template<config Config, action Action>
      char * handle_string(char * buffer, const char * attribute, std::size_t attribute_length, const char * value, std::size_t length, std::size_t max_length)
      {
	return handle_string_<Config, Action, const char *>(buffer, attribute, attribute_length, value, length, max_length);
      }

      template<config Config, action Action>
      char * handle_string(char * buffer, const char * attribute, std::size_t attribute_length, char ** value, std::size_t length, std::size_t max_length)
      {
	return handle_string_<Config, Action, char **>(buffer, attribute, attribute_length, value, length, max_length);
      }

      template<config Config, action Action>
      char * handle_string(char * buffer, const char * attribute, std::size_t attribute_length, std::nullptr_t value, std::size_t length, std::size_t max_length)
      {
	return handle_string_<Config, Action, char *>(buffer, attribute, attribute_length, (char *)value, length, max_length);
      }

      template<config Config, action Action> inline
      char * handle_string(char * buffer, const char * attribute, const char * value, std::size_t length, std::size_t & max_length)
      {
	return handle_string<Config, Action>(buffer, attribute, std::strlen(attribute), value, length, max_length);
      }

      template<config Config, action Action> inline
      char * handle_string(char * buffer, const char * attribute, char ** value, std::size_t length, std::size_t & max_length)
      {
	return handle_string<Config, Action>(buffer, attribute, std::strlen(attribute), value, length, max_length);
      }

      template<config Config, action Action> inline
      char * handle_string(char * buffer, const char * attribute, std::nullptr_t value, std::size_t length, std::size_t & max_length)
      {
	return handle_string<Config, Action>(buffer, attribute, std::strlen(attribute), value, length, max_length);
      }

      template<config Config, action Action, typename T> inline
      char * name(char * buffer, T name, std::size_t name_length, std::size_t max_name_length)
      {
	buffer = ::buffer_handle_http_header::field_<Action>(buffer, "Set-Cookie");

	buffer = buffer_handle::string<Config, align::right, ' ', Action>(buffer, name, name_length, max_name_length);

	buffer = buffer_handle::equal<config::static_, Action>(buffer);

	return buffer;
      }

      // rfc 6265 §5.2 1. states:
      // 'Remove any leading or trailing WSP characters from the name string and the value string'
      // Thus pad left because 'name string' is padded right (locality).
      template<config Config, bool IsQuoted, action Action, typename T> inline
      char * value(char * buffer, T value, std::size_t length, std::size_t max_length)
      {
	if(IsQuoted)
	  {
	    char * local = buffer_handle::double_quote<config::static_, Action>(buffer);

	    if(value != nullptr)
	      {
		local = buffer_handle::string<Config, Action>(local, value, length);
	      }

	    local = buffer_handle::double_quote<Config, Action>(local);

	    if(Config == config::static_)
	      {
		buffer += length;
	      }
	    else if(Config == config::dynamic)
	      {
		std::size_t diff = max_length - length;

		if(buffer_handle::must_write(Config, Action)
		   && 0 < diff)
		  {
		    std::memset(local, ' ', diff);
		  }

		buffer += max_length;
	      }

	    return buffer + 2;
	  }
	else
	  {
	    return buffer_handle::string<Config, align::left, ' ', Action>(buffer, value, length, max_length);
	  }
      }
    };

    template<config Config, action Action> inline
    char * name(char * buffer, const char * name, std::size_t name_length, std::size_t max_name_length)
    {
      return details::name<Config, Action>(buffer, name, name_length, max_name_length);
    }

    template<config Config, action Action> inline
    char * name(char * buffer, char ** name, std::size_t name_length, std::size_t max_name_length)
    {
      buffer = details::name<Config, Action>(buffer, name, name_length, max_name_length);

      *name = *name - max_name_length;//Because 'name' is right aligned, shift left for convenience

      return buffer;
    }

    template<config Config, action Action> inline
    char * name(char * buffer, std::nullptr_t name, std::size_t name_length, std::size_t max_name_length)
    {
      return details::name<Config, Action>(buffer, (char *)name, name_length, max_name_length);
    }

    template<config Config, bool IsQuoted, action Action> inline
    char * value(char * buffer, const char * value, std::size_t length, std::size_t max_length)
    {
      return details::value<Config, IsQuoted, Action>(buffer, value, length, max_length);
    }

    template<config Config, bool IsQuoted, action Action> inline
    char * value(char * buffer, char ** value, std::size_t length, std::size_t max_length)
    {
      return details::value<Config, IsQuoted, Action>(buffer, value, length, max_length);
    }

    template<config Config, bool IsQuoted, action Action> inline
    char * value(char * buffer, std::nullptr_t value, std::size_t length, std::size_t max_length)
    {
      return details::value<Config, IsQuoted, Action>(buffer, (char *)value, length, max_length);
    }

    // rfc 6265 §5.2.1 states:
    // 'If the attribute-value failed to parse as a cookie date, ignore the cookie-av.'
    // Thus 'Expires=                             ;' will force the field to be ignored.
    template<config Config, action Action> inline
    char * expires(char * buffer, std::tm * at)
    {
      buffer = buffer_handle::semicolon<config::static_, Action>(buffer);
      buffer = buffer_handle::space<config::static_, Action>(buffer);
      buffer = attribute<Action>(buffer, "Expires");
      buffer = buffer_handle::equal<config::static_, Action>(buffer);

      typedef buffer_handle::universal_timezone_t<config::static_, align::right, ' '> timezone_type;

      std::size_t length = (std::size_t)buffer_handle::rfc1123::date<Config, true, true, timezone_type, action::size>(nullptr, std::tm(), timezone_type(buffer_handle::universal_timezone::GMT));

      if(Action != action::size)
	{
	  if(buffer_handle::must_write(Config, Action)
	     && at != nullptr)
	    {
	      buffer_handle::rfc1123::date<Config, true, true, timezone_type, Action>(buffer, *at, timezone_type(buffer_handle::universal_timezone::GMT));
	    }
	  else
	    {
	      std::memset(buffer, ' ', length);
	    }
	}

      return buffer + length;
    }

    // rfc 6265 §5.2.2 states:
    // 'If the first character of the attribute-value is not a DIGIT or a "-" character,
    //   ignore the cookie-av.'
    // Thus 'Max-Age=        ;' will force the field to be ignored.
    template<config Config, action Action, class Itoa> inline
    char * max_age(char * buffer, time_t * max_age, uint8_t & max_digits, const Itoa & itoa /* = Itoa() */)
    {
      buffer = buffer_handle::semicolon<config::static_, Action>(buffer);
      buffer = buffer_handle::space<config::static_, Action>(buffer);
      buffer = attribute<Action>(buffer, "Max-Age");
      buffer = buffer_handle::equal<config::static_, Action>(buffer);

      std::size_t length = (std::size_t)buffer_handle::integral_number<Config, align::left, ' ', action::size, Itoa, time_t, uint8_t>(nullptr, time_t(), max_digits, itoa);

      switch(Action)
	{
	case action::prepare:
	  {
	    max_digits = length;
	  }
	case action::write:
	case action::reset:
	  {
	    if(max_age != nullptr)
	      {
		buffer_handle::integral_number<Config, align::left, ' ', Action, Itoa, time_t, uint8_t>(buffer, *max_age, max_digits, itoa);
	      }
	    else
	      {
		std::memset(buffer, ' ', length);
	      }
	  }
	}

      return buffer + length;
    }

    template<config Config, action Action> inline
    char * domain(char * buffer, const char * value, std::size_t length, std::size_t max_length)
    {
      return details::handle_string<Config, Action>(buffer, "Domain", value, length, max_length);
    }

    template<config Config, action Action> inline
    char * domain(char * buffer, char ** value, std::size_t length, std::size_t max_length)
    {
      return details::handle_string<Config, Action>(buffer, "Domain", value, length, max_length);
    }

    template<config Config, action Action> inline
    char * domain(char * buffer, std::nullptr_t value, std::size_t length, std::size_t max_length)
    {
      return details::handle_string<Config, Action>(buffer, "Domain", (char *)value, length, max_length);
    }

    template<config Config, action Action> inline
    char * path(char * buffer, const char * value, std::size_t length, std::size_t max_length)
    {
      return details::handle_string<Config, Action>(buffer, "Path", value, length, max_length);
    }

    template<config Config, action Action> inline
    char * path(char * buffer, char ** value, std::size_t length, std::size_t max_length)
    {
      return details::handle_string<Config, Action>(buffer, "Path", value, length, max_length);
    }

    template<config Config, action Action> inline
    char * path(char * buffer, std::nullptr_t value, std::size_t length, std::size_t max_length)
    {
      return details::handle_string<Config, Action>(buffer, "Path", (char *)value, length, max_length);
    }

    template<config Config, action Action> inline
    char * is_secure(char * buffer, bool value)
    {
      return details::handle_bool<Config, Action>(buffer, "Secure", value);
    }

    template<config Config, action Action> inline
    char * http_only(char * buffer, bool value)
    {
      return details::handle_bool<Config, Action>(buffer, "HttpOnly", value);
    }
  };

  namespace cookie
  {
    template<class Next, config Config>
    template<action Action> inline
    char * expires_t<Next, Config>::handle(char * buffer)
    {
      buffer = expires(buffer, this->expires);

      return Next::template handle<Action>(buffer);
    }

    template<class Next, config Config, class Itoa>
    template<action Action> inline
    char * max_age_t<Next, Config, Itoa>::handle(char * buffer)
    {
      buffer = max_age(buffer, this->max_age, this->max_max_age_digits, Itoa());

      return Next::template handle<Action>(buffer);
    }

    template<class Next>
    struct domain_t<Next, config::dynamic, false> : Next
    {
      const char * domain;
      std::size_t domain_length;
      std::size_t max_domain_length;

      template<action Action>
      char * handle(char * buffer)
      {
	buffer = cookie::domain<config::dynamic, Action>
	  (buffer, this->domain, this->domain_length, this->max_domain_length);

	return Next::template handle<Action>(buffer);
      }
    };

    template<class Next>
    struct domain_t<Next, config::dynamic, true> : Next
    {
      char * domain;
      std::size_t max_domain_length;

      template<action Action>
      char * handle(char * buffer)
      {
	buffer = cookie::domain<config::dynamic, Action>
	  (buffer, &this->domain, this->max_domain_length, this->max_domain_length);

	return Next::template handle<Action>(buffer);
      }
    };

    template<class Next, bool IsExternal>
    struct domain_t<Next, config::static_, IsExternal>
    {
      const char * domain;
      std::size_t domain_length;

      template<action Action>
      char * handle(char * buffer)
      {
	buffer = cookie::domain<config::dynamic, Action>
	  (buffer, this->domain, this->domain_length, this->domain_length);

	return Next::template handle<Action>(buffer);
      }
    };

    template<class Next>
    struct path_t<Next, config::dynamic, false> : Next
    {
      const char * path;
      std::size_t path_length;
      std::size_t max_path_length;

      template<action Action>
      char * handle(char * buffer)
      {
	buffer = cookie::path<config::dynamic, Action>
	  (buffer, this->path, this->path_length, this->max_path_length);

	return Next::template handle<Action>(buffer);
      }
    };

    template<class Next>
    struct path_t<Next, config::dynamic, true> : Next
    {
      char * path;
      std::size_t max_path_length;

      template<action Action>
      char * handle(char * buffer)
      {
	buffer = cookie::path<config::dynamic, Action>
	  (buffer, &this->path, this->max_path_length, this->max_path_length);

	return Next::template handle<Action>(buffer);
      }
    };

    template<class Next, bool IsExternal>
    struct path_t<Next, config::static_, IsExternal>
    {
      const char * path;
      std::size_t path_length;

      template<action Action>
      char * handle(char * buffer)
      {
	buffer = cookie::path<config::dynamic, Action>
	  (buffer, this->path, this->path_length, this->path_length);

	return Next::template handle<Action>(buffer);
      }
    };

    template<class Next, bool Value>
    struct is_secure_t<Next, config::dynamic, Value> : Next
    {
      bool is_secure;

      template<action Action>
      char * handle(char * buffer)
      {
	buffer = details::handle_bool<config::dynamic, Action>(buffer, "Secure", this->is_secure);

	return Next::template handle<Action>(buffer);
      }
    };

    template<class Next, bool Value>
    struct is_secure_t<Next, config::static_, Value>
    {
      template<action Action>
      char * handle(char * buffer)
      {
	if(Value)
	  {
	    buffer = details::handle_bool<config::static_, Action>(buffer, "Secure", true);
	  }

	return Next::template handle<Action>(buffer);
      }
    };

    template<class Next, bool Value>
    struct http_only_t<Next, config::dynamic, Value> : Next
    {
      bool http_only;

      template<action Action>
      char * handle(char * buffer)
      {
	buffer = details::handle_bool<config::dynamic, Action>(buffer, "HttpOnly", this->http_only);

	return Next::template handle<Action>(buffer);
      }
    };

    template<class Next, bool Value>
    struct http_only_t<Next, config::static_, Value>
    {
      template<action Action>
      char * handle(char * buffer)
      {
	if(Value)
	  {
	    buffer = details::handle_bool<config::static_, Action>(buffer, "HttpOnly", true);
	  }

	return Next::template handle<Action>(buffer);
      }
    };

    template<>
    struct name_t<config::static_, false>
    {
      const char * name;
      std::size_t name_length;

      template<action Action>
      char * handle(char * buffer)
      {
	return cookie::name<config::static_, Action>(buffer, this->name, this->name_length, this->name_length);
      }
    };

    template<>
    struct name_t<config::static_, true>
    {
      char * name;
      std::size_t name_length;

      template<action Action>
      char * handle(char * buffer)
      {
	return cookie::name<config::static_, Action>(buffer, &this->name, this->name_length, this->name_length);
      }
    };

    template<>
    struct name_t<config::dynamic, false>
    {
      const char * name;
      std::size_t name_length;
      std::size_t max_name_length;

      template<action Action>
      char * handle(char * buffer)
      {
	return cookie::name<config::dynamic, Action>(buffer, this->name, this->name_length, this->max_name_length);
      }
    };

    template<>
    struct name_t<config::dynamic, true>
    {
      char * name;
      std::size_t max_name_length;

      template<action Action>
      char * handle(char * buffer)
      {
	return cookie::name<config::dynamic, Action>(buffer, &this->name, this->max_name_length, this->max_name_length);
      }
    };

    template<bool IsQuoted, bool IsExternal>
    struct value_t<config::static_, IsQuoted, IsExternal>
    {
      const char * value;
      std::size_t value_length;

      template<action Action>
      char * handle(char * buffer)
      {
	return cookie::value<config::static_, IsQuoted, Action>(buffer, this->value, this->value_length, this->value_length);
      }
    };

    template<bool IsQuoted>
    struct value_t<config::dynamic, IsQuoted, false>
    {
      const char * value;
      std::size_t value_length;
      std::size_t max_value_length;

      template<action Action>
      char * handle(char * buffer)
      {
	return cookie::value<config::dynamic, IsQuoted, Action>(buffer, this->value, this->value_length, this->max_value_length);
      }
    };

    template<bool IsQuoted>
    struct value_t<config::dynamic, IsQuoted, true>
    {
      char * value;
      std::size_t max_value_length;

      template<action Action>
      char * handle(char * buffer)
      {
	return cookie::value<config::dynamic, IsQuoted, Action>(buffer, &this->value, this->max_value_length, this->max_value_length);
      }
    };
  };

  template<class Next, config NameConfig, config ValueConfig, bool IsQuoted, bool IsNameExternal, bool IsValueExternal>
  template<action Action>
  char * cookie_t<Next, NameConfig, ValueConfig, IsQuoted, IsNameExternal, IsValueExternal>::handle(char * buffer)
  {
    buffer = cookie::name_t<NameConfig, IsNameExternal>::template handle<Action>(buffer);
    buffer = cookie::value_t<ValueConfig, IsQuoted, IsValueExternal>::template handle<Action>(buffer);

    return Next::template handle<Action>(buffer);
  }
};
