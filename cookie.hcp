#include <cstring> // memcpy() memset()

#include <buffer_handle/date.hpp> // rfc1123::date()
#include <buffer_handle/helper.hpp> // must_write()
#include <buffer_handle/number.hpp> // integral_number()
#include <buffer_handle/string.hpp> // string()
#include <buffer_handle/timezone.hpp> // universal_timezone_t
#include <buffer_handle/token.hpp> // equal() semicolon() space()

namespace buffer_handle_http_header
{
  namespace details
  {
    // For 'Secure' and 'HttpOnly'
    // rfc 6265 §5.2.5 and §5.2.6
    // If unset, write spaces, if set write value
    template<config Config, action Action> inline
    char * handle_bool(char * buffer, const char * attribute, std::size_t attribute_length, bool value)
    {
      if(Config == config::static_)
	{
	  if(value)
	    {
	      buffer = buffer_handle::semicolon<Config, Action>(buffer);
	      buffer = buffer_handle::space<Config, Action>(buffer);

	      if(Action == action::prepare)
		{
		  buffer_handle::string<Config, Action>(buffer, attribute, attribute_length);
		}

	      buffer += attribute_length;
	    }
	}
      else if(Config == config::dynamic)
	{
	  buffer = buffer_handle::semicolon<Config, Action>(buffer);
	  buffer = buffer_handle::space<Config, Action>(buffer);

	  switch(Action)
	    {
	    case action::prepare:
	    case action::reset:
	      {
		std::memset(buffer, ' ', attribute_length);

		break;
	      }
	    case action::write:
	      {
		if(value)
		  {
		    std::memcpy(buffer, attribute, attribute_length);
		  }
	      }
	    }

	  buffer += attribute_length;
	}

      return buffer;
    }

    template<config Config, action Action> inline
    char * handle_bool(char * buffer, const char * attribute, bool value)
    {
      return handle_bool<Config, Action>(buffer, attribute, std::strlen(attribute), value);
    }

    // For 'Domain' and 'Path'
    // rfc 6265 §5.2.3 and §5.2.4
    // Write a ';' delimiter at the end of the content
    template<config Config, action Action> inline
    char * handle_string(char * buffer, const char * attribute, std::size_t attribute_length, const char * value, std::size_t length, std::size_t max_length)
    {
      buffer = buffer_handle::semicolon<Config, Action>(buffer);
      buffer = buffer_handle::space<Config, Action>(buffer);
      buffer = buffer_handle::string<Config, Action>(buffer, attribute, attribute_length);
      buffer = buffer_handle::equal<Config, Action>(buffer);

      buffer = buffer_handle::string<Config, align::left, ' ', Action>(buffer, value, length, max_length);

      if(length < max_length)
	{
	  buffer_handle::semicolon<Config, Action>(buffer - (max_length - length));
	}

      return buffer;
    }

    template<config Config, action Action> inline
    char * handle_string(char * buffer, const char * attribute, const char * value, std::size_t length, std::size_t & max_length)
    {
      return handle_string<Config, Action>(buffer, attribute, std::strlen(attribute), value, length, max_length);
    }

    // rfc 6265 §5.2 1. states:
    // 'Remove any leading or trailing WSP characters from the name string and the value string'
    // Thus pad left because 'name string' is padded right (locality).
    template<config Config, bool IsQuoted, action Action> inline
    char * value_string(char * buffer, const char * value, std::size_t length, std::size_t max_length)
    {
      if(IsQuoted)
	{
	  char * local = buffer_handle::double_quote<config::static_, Action>(buffer);

	  if(value != nullptr)
	    {
	      local = buffer_handle::string<Config, Action>(local, value, length);
	    }

	  local = buffer_handle::double_quote<Config, Action>(local);

	  if(Config == config::static_)
	    {
	      buffer += length;
	    }
	  else if(Config == config::dynamic)
	    {
	      std::size_t diff = max_length - length;

	      if(buffer_handle::must_write<Config, Action>()
		 && 0 < diff)
		{
		  std::memset(local, ' ', diff);
		}

	      buffer += max_length;
	    }

	  return buffer + 2;
	}
      else
	{
	  return buffer_handle::string<Config, align::left, ' ', Action>(buffer, value, length, max_length);
	}
    }

    // rfc 6265 §5.2.1 states:
    // 'If the attribute-value failed to parse as a cookie date, ignore the cookie-av.'
    // Thus 'Expires=                             ;' will force the field to be ignored.
    template<config Config, action Action> inline
    char * expires(char * buffer, bool has, std::tm at)
    {
      buffer = buffer_handle::semicolon<config::static_, Action>(buffer);
      buffer = buffer_handle::space<config::static_, Action>(buffer);
      buffer = attribute<Action>(buffer, "Expires");
      buffer = buffer_handle::equal<config::static_, Action>(buffer);

      typedef buffer_handle::universal_timezone_t<config::static_, align::right, ' '> timezone_type;

      std::size_t length = (std::size_t)buffer_handle::rfc1123::date<Config, true, true, timezone_type, action::size>(nullptr, at, timezone_type(buffer_handle::universal_timezone::GMT));

      if(Action != action::size)
	{
	  if(buffer_handle::must_write<Config, Action>()
	     && has)
	    {
	      buffer_handle::rfc1123::date<Config, true, true, timezone_type, Action>(buffer, at, timezone_type(buffer_handle::universal_timezone::GMT));
	    }
	  else
	    {
	      std::memset(buffer, ' ', length);
	    }
	}

      return buffer + length;
    }

    // rfc 6265 §5.2.2 states:
    // 'If the first character of the attribute-value is not a DIGIT or a "-" character,
    //   ignore the cookie-av.'
    // Thus 'Max-Age=        ;' will force the field to be ignored.
    template<config Config, action Action, class Itoa> inline
    char * max_age(char * buffer, bool has, time_t max_age, uint8_t & max_digits, const Itoa & itoa)
    {
      buffer = buffer_handle::semicolon<config::static_, Action>(buffer);
      buffer = buffer_handle::space<config::static_, Action>(buffer);
      buffer = attribute<Action>(buffer, "Max-Age");
      buffer = buffer_handle::equal<config::static_, Action>(buffer);

      std::size_t length = (std::size_t)buffer_handle::integral_number<Config, align::left, ' ', action::size, Itoa, time_t, uint8_t>(nullptr, max_age, max_digits, itoa);

      switch(Action)
	{
	case action::prepare:
	  {
	    max_digits = length;
	  }
	case action::write:
	case action::reset:
	  {
	    if(has)
	      {
		buffer_handle::integral_number<Config, align::left, ' ', Action, Itoa, time_t, uint8_t>(buffer, max_age, max_digits, itoa);
	      }
	    else
	      {
		std::memset(buffer, ' ', length);
	      }
	  }
	}

      return buffer + length;
    }

    template<config Config, action Action> inline
    char * domain(char * buffer, const char * value, std::size_t length, std::size_t max_length)
    {
      return handle_string<Config, Action>(buffer, "Domain", value, length, max_length);
    }

    template<config Config, action Action> inline
    char * path(char * buffer, const char * value, std::size_t length, std::size_t max_length)
    {
      return handle_string<Config, Action>(buffer, "Path", value, length, max_length);
    }
  };

  template<typename Traits, bool IsValueQuoted> inline
  cookie_t<Traits, IsValueQuoted>::cookie_t() :
    name(nullptr),
    name_length(0),

    value(nullptr),
    value_length(0),

    expires(),
    max_age(),

    domain(nullptr),
    domain_length(0),

    path(nullptr),
    path_length(0),

    has_expires(false),
    has_max_age(false),
    is_secure(false),
    http_only(false),

    max_name_length(0),
    max_value_length(0),

    max_max_age_digits(0),

    max_domain_length(0),
    max_path_length(0)
  {

  }

  // Have dynamic fields at the beginning for locality
  template<typename Config, bool IsValueQuoted>
  template<action Action, class Itoa> inline
  char * cookie_t<Config, IsValueQuoted>::handle(char * buffer, const Itoa & itoa)
  {
    buffer = field_<Action>(buffer, "Set-Cookie");

    buffer = buffer_handle::string<name_config, align::right, ' ', Action>(buffer, this->name, this->name_length, this->max_name_length);

    buffer = buffer_handle::equal<config::static_, Action>(buffer);

    buffer = details::value_string<value_config, IsValueQuoted, Action>(buffer, this->value, this->value_length, this->max_value_length);

    if(expires_config == config::dynamic)
      {
	buffer = details::expires<expires_config, Action>(buffer, this->has_expires, this->expires);
      }

    if(max_age_config == config::dynamic)
      {
	buffer = details::max_age<max_age_config, Action, Itoa>(buffer, this->has_max_age, this->max_age, this->max_max_age_digits, itoa);
      }

    if(domain_config == config::dynamic)
      {
	buffer = details::domain<domain_config, Action>(buffer, this->domain, this->domain_length, this->max_domain_length);
      }

    if(path_config == config::dynamic)
      {
	buffer = details::path<path_config, Action>(buffer, this->path, this->path_length, this->max_path_length);
      }

    if(is_secure_config == config::dynamic)
      {
	buffer = details::handle_bool<is_secure_config, Action>(buffer, "Secure", this->is_secure);
      }

    if(http_only_config == config::dynamic)
      {
	buffer = details::handle_bool<http_only_config, Action>(buffer, "HttpOnly", this->http_only);
      }

    if(expires_config == config::static_
       && this->has_expires)
      {
	buffer = details::expires<expires_config, Action>(buffer, true, this->expires);
      }

    if(max_age_config == config::static_
       && this->has_max_age)
      {
	buffer = details::max_age<max_age_config, Action, Itoa>(buffer, true, this->max_age, this->max_max_age_digits, itoa);
      }

    if(domain_config == config::static_
       && this->domain != nullptr)
      {
	buffer = details::domain<domain_config, Action>(buffer, this->domain, this->domain_length, this->max_domain_length);
      }

    if(path_config == config::static_
       && this->path != nullptr)
      {
	buffer = details::path<path_config, Action>(buffer, this->path, this->path_length, this->max_path_length);
      }

    if(is_secure_config == config::static_
       && this->is_secure)
      {
	buffer = details::handle_bool<is_secure_config, Action>(buffer, "Secure", true);
      }

    if(http_only_config == config::static_
       && this->http_only)
      {
	buffer = details::handle_bool<http_only_config, Action>(buffer, "HttpOnly", true);
      }

    return buffer;
  }
};
