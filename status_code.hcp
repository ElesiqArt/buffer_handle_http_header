#include <cassert> // assert()
#include <cstring> // strlen()

#include <buffer_handle/number.hpp> // integral_number()
#include <buffer_handle/string.hpp> // string()

namespace buffer_handle_http_header
{
  namespace status_code
  {
    inline
    const char * rfc2616_t::reason(status_code_t code)
    {
      switch(code)
	{
#define DEFINE(X) case X::value: return X::reason;
	  DEFINE(informational::continue_);
	  DEFINE(informational::switching_protocols);

	  DEFINE(success::ok);
	  DEFINE(success::created);
	  DEFINE(success::accepted);
	  DEFINE(success::non_authoritative_information);
	  DEFINE(success::no_content);
	  DEFINE(success::reset_content);
	  DEFINE(success::partial_content);

	  DEFINE(redirection::multiple_choice);
	  DEFINE(redirection::moved_permanently);
	  DEFINE(redirection::found);
	  DEFINE(redirection::see_other);
	  DEFINE(redirection::not_modified);
	  DEFINE(redirection::use_proxy);
	  DEFINE(redirection::temporary_redirect);

	  DEFINE(client_error::bad_request);
	  DEFINE(client_error::unauthorized);
	  DEFINE(client_error::payment_required);
	  DEFINE(client_error::forbidden);
	  DEFINE(client_error::not_found);
	  DEFINE(client_error::method_not_allowed);
	  DEFINE(client_error::not_acceptable);
	  DEFINE(client_error::proxy_authentication_required);
	  DEFINE(client_error::request_time_out);
	  DEFINE(client_error::conflict);
	  DEFINE(client_error::gone);
	  DEFINE(client_error::length_required);
	  DEFINE(client_error::precondition_failed);
	  DEFINE(client_error::request_entity_too_large);
	  DEFINE(client_error::request_uri_too_large);
	  DEFINE(client_error::unsupported_media_type);
	  DEFINE(client_error::requested_range_not_satisfiable);
	  DEFINE(client_error::expectation_failed);

	  DEFINE(server_error::internal_server_error);
	  DEFINE(server_error::not_implemented);
	  DEFINE(server_error::bad_gateway);
	  DEFINE(server_error::service_unavailable);
	  DEFINE(server_error::gateway_timeout);
	  DEFINE(server_error::http_version_not_supported);
#undef DEFINE

	default: return "Unknown";
	}
    }

    inline
    const char * rfc6585_t::reason(status_code_t code)
    {
      switch(code)
	{
#define DEFINE(X) case X::value: return X::reason;
	  DEFINE(client_error::precondition_required);
	  DEFINE(client_error::too_many_requests);
	  DEFINE(client_error::request_header_fields_too_large);
	  DEFINE(server_error::network_authentication_required);
#undef DEFINE
	default: return rfc2616_t::reason(code);
	}
    }
  };

  template<config Config, class Code, action Action, class Itoa> inline
  char * status_code_(char * buffer, status_code_t value, const Itoa & itoa /* = Itoa() */)
  {
    uint8_t max_digits = 3;

    return buffer_handle::integral_number<Config, align::left, ' ', Action, Itoa, status_code_t, uint8_t>(buffer, value, max_digits, itoa);
  }

  template<config Config, class Code, action Action> inline
  char * reason_phrase(char * buffer, status_code_t value)
  {
    const char * reason = Code::reason(value);

    return buffer_handle::string<Config, align::right, ' ', Action>(buffer, reason, std::strlen(reason), Code::max_reason_length);
  }

  template<config Config, class Code, action Action> inline
  char * reason_phrase(char * buffer, status_code_t value, std::size_t & previous_length)
  {
    const char * reason = Code::reason(value);

    return buffer_handle::string<Config, align::right, ' ', Action>(buffer, reason, std::strlen(reason), Code::max_reason_length, previous_length);
  }
};
